name: Build Poco F1 Kernel 4.19 with KernelSU-Next

on:
  workflow_dispatch:

env:
  TZ: America/New_York

jobs:
  build:
    name: Build Kernel by ${{ github.actor }}
    runs-on: ubuntu-24.04
    steps:
    - uses: actions/checkout@v4
    
    - name: Set swap to 10G
      uses: pierotofy/set-swap-space@master
      with:
        swap-size-gb: 10
    
    - name: Setup build kernel environment
      run: |
        echo "BUILD_TIME=$(TZ=America/New_York date "+%y%m%d")" >> $GITHUB_ENV
        echo "BUILD_TIME_1=$(TZ=America/New_York date "+%Y-%m-%d")" >> $GITHUB_ENV
        sudo apt-get update
        sudo apt-get install git ccache automake flex lzop bison gperf build-essential zip curl zlib1g-dev g++-multilib bzip2 libbz2-dev liblz4-tool make squashfs-tools dpkg-dev libssl-dev python3 bc libc6-dev-i386 libncurses5-dev
        mkdir -p $GITHUB_WORKSPACE/kernel_workspace
    
    - name: Download Clang from aosp
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        git clone https://gitlab.com/crdroidandroid/android_prebuilts_clang_host_linux-x86_clang-r487747c clang-aosp
    
    - name: Download Gcc from aosp
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        git clone https://gitlab.com/crdroidandroid/android_prebuilts_gcc_linux-x86_aarch64_aarch64-linux-android-4.9 gcc-64
        git clone https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_arm_arm-linux-androideabi-4.9 gcc-32
    
    - name: Download kernel source and device trees
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        # Clone main kernel source
        git clone https://github.com/duckyduckG/android_kernel_xiaomi_sdm845_419.git android-kernel --depth=1
        
        # Clone device trees
        git clone https://github.com/duckyduckG/devicetree_qcom-sdm845_419.git qcom-sdm845-dt --depth=1
        git clone https://github.com/duckyduckG/devicetree_xiaomi_419.git xiaomi-dt --depth=1
        git clone https://github.com/duckyduckG/kernel_techpack_mi845_419.git techpack-mi845 --depth=1
        
        # Setup device tree structure
        mkdir -p $GITHUB_WORKSPACE/kernel_workspace/android-kernel/arch/arm64/boot/dts/qcom-sdm845
        mkdir -p $GITHUB_WORKSPACE/kernel_workspace/android-kernel/arch/arm64/boot/dts/xiaomi
        mkdir -p $GITHUB_WORKSPACE/kernel_workspace/android-kernel/techpack/mi845
        
        # Copy device trees to kernel source
        cp -r qcom-sdm845-dt/* android-kernel/arch/arm64/boot/dts/qcom-sdm845/
        cp -r xiaomi-dt/* android-kernel/arch/arm64/boot/dts/xiaomi/
        cp -r techpack-mi845/* android-kernel/techpack/mi845/
        
        # Clean up setlocalversion
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel/scripts
        sed -i 's/ -dirty//g' setlocalversion

    - name: Setup KernelSU Next
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
        rm -rf KernelSU-Next
        curl -LSs "https://raw.githubusercontent.com/rifsxd/KernelSU-Next/next/kernel/setup.sh" | bash -
        KSU_VERSION=$(cd KernelSU-Next && expr $(/usr/bin/git rev-list --count HEAD) + 10200)
        echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV

    - name: Debug - Check kernel source structure
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
        echo "=== Available defconfigs in arch/arm64/configs ==="
        ls -la arch/arm64/configs/ 2>/dev/null || echo "arch/arm64/configs directory not found"
        echo "=== Available vendor configs ==="
        find . -name "*.config" -type f | head -10
        echo "=== Checking for vendor directory structure ==="
        ls -la vendor/ 2>/dev/null || echo "vendor directory not found"
        if [ -d vendor ]; then
          find vendor/ -name "*defconfig*" -o -name "*.config" | head -10
        fi
        echo "=== Checking power supply drivers ==="
        ls -la drivers/power/supply/qcom/ 2>/dev/null || echo "qcom power supply directory not found"

    - name: Fix power supply driver dependencies
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
        echo "=== Analyzing power supply driver dependencies ==="
        
        # Check what power supply drivers exist
        if [ -d drivers/power/supply/qcom ]; then
          echo "Available QCOM power supply drivers:"
          ls -la drivers/power/supply/qcom/*.c | head -10
          
          echo "Checking for votable driver..."
          if [ -f drivers/power/supply/qcom/qpnp-pmic-votable.c ]; then
            echo "✅ Votable driver found"
          else
            echo "❌ Votable driver missing - this will cause build failures"
            echo "Looking for alternative votable implementations..."
            find drivers/ -name "*votable*" -type f 2>/dev/null || echo "No votable files found"
          fi
          
          echo "Checking for step charging driver..."
          find drivers/power/supply/qcom/ -name "*step*" -o -name "*jeita*" | head -5
        fi
        
        echo "=== Applying power supply driver fixes ==="
        
        # Create a simple votable stub if the real driver doesn't exist
        if [ ! -f drivers/power/supply/qcom/qpnp-pmic-votable.c ]; then
          echo "Creating votable stub driver..."
          cat > drivers/power/supply/qcom/qpnp-pmic-votable.c << 'EOF'
        /* Votable stub driver for compilation */
        #include <linux/module.h>
        #include <linux/kernel.h>
        
        struct votable {
            int dummy;
        };
        
        struct votable *find_votable(const char *name) { return NULL; }
        struct votable *create_votable(const char *name, int type, 
                                     int (*callback)(struct votable *, void *, 
                                                   int, const char *), 
                                     void *data) { return NULL; }
        int vote(struct votable *votable, const char *client, bool enabled, int val) { return 0; }
        void destroy_votable(struct votable *votable) { }
        
        EXPORT_SYMBOL(find_votable);
        EXPORT_SYMBOL(create_votable);
        EXPORT_SYMBOL(vote);
        EXPORT_SYMBOL(destroy_votable);
        
        MODULE_LICENSE("GPL");
        MODULE_DESCRIPTION("Votable stub driver");
        EOF
        fi
        
        # Create step charging stub if missing
        if [ ! -f drivers/power/supply/qcom/step-chg-jeita.c ] && [ ! -f drivers/power/supply/qcom/qcom-step-chg.c ]; then
          echo "Creating step charging stub..."
          cat > drivers/power/supply/qcom/step-chg-jeita.c << 'EOF'
        /* Step charging stub driver */
        #include <linux/module.h>
        #include <linux/kernel.h>
        #include <linux/power_supply.h>
        
        int qcom_step_chg_init(struct device *dev, bool step_chg_enable, 
                             bool sw_jeita_enable, bool jeita_arb_enable)
        {
            return 0;
        }
        EXPORT_SYMBOL(qcom_step_chg_init);
        
        MODULE_LICENSE("GPL");
        MODULE_DESCRIPTION("Step charging stub driver");
        EOF
        fi
        
        # Update Makefile to include our stub drivers
        echo "Updating power supply Makefile..."
        if [ -f drivers/power/supply/qcom/Makefile ]; then
          # Add our stub drivers to the Makefile if they're not already there
          if ! grep -q "qpnp-pmic-votable" drivers/power/supply/qcom/Makefile; then
            echo "obj-\$(CONFIG_QPNP_FG_GEN3) += qpnp-pmic-votable.o" >> drivers/power/supply/qcom/Makefile
          fi
          if ! grep -q "step-chg-jeita" drivers/power/supply/qcom/Makefile; then
            echo "obj-\$(CONFIG_QPNP_FG_GEN3) += step-chg-jeita.o" >> drivers/power/supply/qcom/Makefile
          fi
          
          echo "Updated Makefile contents:"
          tail -10 drivers/power/supply/qcom/Makefile
        fi

    - name: Build Poco F1 kernel with KernelSU Next
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
        export ARCH=arm64
        export SUBARCH=arm
        export PATH=$GITHUB_WORKSPACE/kernel_workspace/clang-aosp/bin:$GITHUB_WORKSPACE/kernel_workspace/gcc-64/bin:$GITHUB_WORKSPACE/kernel_workspace/gcc-32/bin:$PATH
        export KBUILD_BUILD_HOST=Github-Action
        export KBUILD_BUILD_USER=$(echo ${{ github.actor }} | tr A-Z a-z)
        BA_CMD="CLANG_TRIPLE=aarch64-linux-gnu- CROSS_COMPILE=aarch64-linux-android- CROSS_COMPILE_ARM32=arm-linux-androideabi-"
        EX_CMD="LD=ld.lld LLVM=1 LLVM_IAS=1"
        
        # Determine which defconfig to use
        if [ -f vendor/sdm845-perf_defconfig ]; then
          DEFCONFIG="vendor/sdm845-perf_defconfig"
          echo "Using vendor defconfig: $DEFCONFIG"
        elif [ -f arch/arm64/configs/sdm845-perf_defconfig ]; then
          DEFCONFIG="sdm845-perf_defconfig"
          echo "Using arch defconfig: $DEFCONFIG"
        elif [ -f arch/arm64/configs/beryllium_defconfig ]; then
          DEFCONFIG="beryllium_defconfig"
          echo "Using beryllium defconfig: $DEFCONFIG"
        else
          echo "No suitable defconfig found, using generic"
          DEFCONFIG="defconfig"
        fi
        
        echo "=== Building with defconfig: $DEFCONFIG ==="
        make O=out ARCH=arm64 CC=clang $BA_CMD $EX_CMD $DEFCONFIG 2>&1 | tee build_config.log
        
        # Apply additional configs if they exist
        if [ -f vendor/xiaomi/sdm845-common.config ]; then
          echo "=== Applying sdm845-common.config ==="
          scripts/kconfig/merge_config.sh -O out out/.config vendor/xiaomi/sdm845-common.config 2>&1 | tee -a build_config.log || echo "Config merge failed, continuing"
        fi
        
        if [ -f vendor/xiaomi/beryllium.config ]; then
          echo "=== Applying beryllium.config ==="
          scripts/kconfig/merge_config.sh -O out out/.config vendor/xiaomi/beryllium.config 2>&1 | tee -a build_config.log || echo "Config merge failed, continuing"
        fi
        
        # Ensure problematic configs are disabled
        echo "=== Adjusting power supply configs ==="
        if [ -f out/.config ]; then
          # Comment out or disable problematic drivers that we don't have
          sed -i 's/^CONFIG_QPNP_SMB2=.*/# CONFIG_QPNP_SMB2 is not set/' out/.config 2>/dev/null || true
          sed -i 's/^CONFIG_QPNP_SMB5=.*/# CONFIG_QPNP_SMB5 is not set/' out/.config 2>/dev/null || true
          sed -i 's/^CONFIG_SMB1355_SLAVE_CHARGER=.*/# CONFIG_SMB1355_SLAVE_CHARGER is not set/' out/.config 2>/dev/null || true
          sed -i 's/^CONFIG_SMB1390_CHARGE_PUMP_PSY=.*/# CONFIG_SMB1390_CHARGE_PUMP_PSY is not set/' out/.config 2>/dev/null || true
          
          # Make sure fuel gauge is enabled (since we created stubs for its dependencies)
          if grep -q "CONFIG_QPNP_FG_GEN3" out/.config; then
            sed -i 's/# CONFIG_QPNP_FG_GEN3 is not set/CONFIG_QPNP_FG_GEN3=y/' out/.config 2>/dev/null || true
          fi
          
          echo "Final power supply related configs:"
          grep -E "(QPNP_FG|SMB|STEP_CHG)" out/.config | head -10 || echo "No power configs found"
        fi
        
        # Build the kernel
        echo "=== Starting kernel compilation ==="
        make -j$(nproc --all) O=out ARCH=arm64 CC=clang $BA_CMD $EX_CMD 2>&1 | tee build_kernel.log || {
          echo "=== First build attempt failed, trying with fewer jobs ==="
          make -j4 O=out ARCH=arm64 CC=clang $BA_CMD $EX_CMD 2>&1 | tee -a build_kernel.log || {
            echo "=== Second build attempt failed, trying single-threaded ==="
            make -j1 O=out ARCH=arm64 CC=clang $BA_CMD $EX_CMD 2>&1 | tee -a build_kernel.log || {
              echo "=== Build failed completely ==="
              echo "Last 50 lines of build log:"
              tail -50 build_kernel.log
              exit 1
            }
          }
        }

    - name: Check kernel output files for Poco F1 Image
      run: |
       cd $GITHUB_WORKSPACE/kernel_workspace
       echo "=== Checking build output ==="
       ls -la android-kernel/out/arch/arm64/boot/ 2>/dev/null || echo "Boot directory not found"
       
       if [ -f android-kernel/out/arch/arm64/boot/Image.gz-dtb ]; then
           echo "✅ Found Image.gz-dtb"
           echo "CHECK_IMAGE=true" >> $GITHUB_ENV
           echo "KERNEL_IMAGE=Image.gz-dtb" >> $GITHUB_ENV
           ls -lh android-kernel/out/arch/arm64/boot/Image.gz-dtb
       elif [ -f android-kernel/out/arch/arm64/boot/Image ]; then
           echo "✅ Found Image"
           echo "CHECK_IMAGE=true" >> $GITHUB_ENV  
           echo "KERNEL_IMAGE=Image" >> $GITHUB_ENV
           ls -lh android-kernel/out/arch/arm64/boot/Image
       else
           echo "❌ No kernel image found"
           echo "Available files in out/arch/arm64/boot/:"
           ls -la android-kernel/out/arch/arm64/boot/ 2>/dev/null || echo "Directory does not exist"
           exit 1
       fi

    - name: Upload build logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: Build-Logs-${{ env.BUILD_TIME }}
        path: |
          kernel_workspace/android-kernel/build_*.log
          kernel_workspace/android-kernel/out/.config

    - name: Make AnyKernel3 with Poco F1 Image
      if: env.CHECK_IMAGE == 'true'
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        git clone https://github.com/osm0sis/AnyKernel3 --depth=1 AnyKernel3
        
        # Copy kernel image (use the detected kernel image)
        if [ "$KERNEL_IMAGE" = "Image.gz-dtb" ]; then
            cp android-kernel/out/arch/arm64/boot/Image.gz-dtb AnyKernel3/
        else
            cp android-kernel/out/arch/arm64/boot/Image AnyKernel3/
        fi
        
        # Copy dtbo if available
        if [ -f android-kernel/out/arch/arm64/boot/dtbo.img ]; then
            cp android-kernel/out/arch/arm64/boot/dtbo.img AnyKernel3/
        fi
        
        # Setup AnyKernel3 configuration for Poco F1
        cd AnyKernel3
        cat > anykernel.sh << 'EOF'
        # AnyKernel3 Ramdisk Mod Script
        # osm0sis @ xda-developers
        
        ## AnyKernel setup
        # begin properties
        properties() { '
        kernel.string=Poco F1 KernelSU-Next by nobiti
        do.devicecheck=1
        do.modules=0
        do.systemless=1
        do.cleanup=1
        do.cleanuponabort=0
        device.name1=beryllium
        device.name2=Poco F1
        device.name3=POCOPHONE F1
        supported.versions=9.0-14.0
        supported.patchlevels=
        '; } # end properties
        
        # shell variables
        block=/dev/block/bootdevice/by-name/boot;
        is_slot_device=1;
        ramdisk_compression=auto;
        patch_vbmeta_flag=auto;
        
        ## AnyKernel methods (DO NOT CHANGE)
        # import patching functions/variables - see for reference
        . tools/ak3-core.sh;
        
        ## AnyKernel file attributes
        # set permissions/ownership for included ramdisk files
        set_perm_recursive 0 0 755 644 $ramdisk/*;
        set_perm_recursive 0 0 750 750 $ramdisk/init* $ramdisk/sbin;
        
        ## AnyKernel install
        dump_boot;
        write_boot;
        ## end install
        EOF
        
        rm -rf .git* README.md

    - name: Compress AnyKernel3 folder with Poco F1 Image to zip
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace/AnyKernel3
        zip -r $GITHUB_WORKSPACE/AK3-PocoF1-4.19_KernelSU-Next_${{ env.KSUVER }}-${{ env.BUILD_TIME }}.zip ./*

    - name: Upload Poco F1 Kernel Image
      if: env.CHECK_IMAGE == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: Image-PocoF1-4.19_KernelSU-Next_${{ env.KSUVER }}
        path: |
          kernel_workspace/android-kernel/out/arch/arm64/boot/Image*
          kernel_workspace/android-kernel/out/arch/arm64/boot/dtbo.img

    - name: Upload Poco F1 AnyKernel3 zip
      if: env.CHECK_IMAGE == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: AK3-PocoF1-4.19_KernelSU-Next_${{ env.KSUVER }}-${{ env.BUILD_TIME }}
        path: AK3-PocoF1-4.19_KernelSU-Next_${{ env.KSUVER }}-${{ env.BUILD_TIME }}.zip
