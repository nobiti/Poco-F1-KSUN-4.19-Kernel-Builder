name: Build Poco F1 Kernel 4.19 with KernelSU-Next

on:
  workflow_dispatch:

env:
  TZ: America/New_York

jobs:
  build:
    name: Build Kernel by ${{ github.actor }}
    runs-on: ubuntu-24.04
    steps:
    - uses: actions/checkout@v4
    
    - name: Set swap to 10G
      uses: pierotofy/set-swap-space@master
      with:
        swap-size-gb: 10
    
    - name: Setup build kernel environment
      run: |
        echo "BUILD_TIME=$(TZ=America/New_York date "+%y%m%d")" >> $GITHUB_ENV
        echo "BUILD_TIME_1=$(TZ=America/New_York date "+%Y-%m-%d")" >> $GITHUB_ENV
        sudo apt-get update
        sudo apt-get install git ccache automake flex lzop bison gperf build-essential zip curl zlib1g-dev g++-multilib bzip2 libbz2-dev liblz4-tool make squashfs-tools dpkg-dev libssl-dev python3 bc libc6-dev-i386 libncurses5-dev
        mkdir -p $GITHUB_WORKSPACE/kernel_workspace
    
    - name: Download Clang from aosp
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        git clone https://gitlab.com/crdroidandroid/android_prebuilts_clang_host_linux-x86_clang-r487747c clang-aosp
    
    - name: Download Gcc from aosp
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        git clone https://gitlab.com/crdroidandroid/android_prebuilts_gcc_linux-x86_aarch64_aarch64-linux-android-4.9 gcc-64
        git clone https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_arm_arm-linux-androideabi-4.9 gcc-32
    
    - name: Download kernel source and device trees
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        # Clone main kernel source
        git clone https://github.com/duckyduckG/android_kernel_xiaomi_sdm845_419.git android-kernel --depth=1
        
        # Clone device trees
        git clone https://github.com/duckyduckG/devicetree_qcom-sdm845_419.git qcom-sdm845-dt --depth=1
        git clone https://github.com/duckyduckG/devicetree_xiaomi_419.git xiaomi-dt --depth=1
        git clone https://github.com/duckyduckG/kernel_techpack_mi845_419.git techpack-mi845 --depth=1
        
        # Setup device tree structure
        mkdir -p $GITHUB_WORKSPACE/kernel_workspace/android-kernel/arch/arm64/boot/dts/qcom-sdm845
        mkdir -p $GITHUB_WORKSPACE/kernel_workspace/android-kernel/arch/arm64/boot/dts/xiaomi
        mkdir -p $GITHUB_WORKSPACE/kernel_workspace/android-kernel/techpack/mi845
        
        # Copy device trees to kernel source
        cp -r qcom-sdm845-dt/* android-kernel/arch/arm64/boot/dts/qcom-sdm845/
        cp -r xiaomi-dt/* android-kernel/arch/arm64/boot/dts/xiaomi/
        cp -r techpack-mi845/* android-kernel/techpack/mi845/
        
        # Clean up setlocalversion
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel/scripts
        sed -i 's/ -dirty//g' setlocalversion

    - name: Setup KernelSU Next
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
        rm -rf KernelSU-Next
        curl -LSs "https://raw.githubusercontent.com/rifsxd/KernelSU-Next/next/kernel/setup.sh" | bash -
        KSU_VERSION=$(cd KernelSU-Next && expr $(/usr/bin/git rev-list --count HEAD) + 10200)
        echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV

    - name: Debug - List available defconfigs
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
        echo "=== Available defconfigs in arch/arm64/configs ==="
        ls -la arch/arm64/configs/ || echo "arch/arm64/configs directory not found"
        echo "=== Available vendor configs ==="
        find . -name "*.config" -type f | head -20
        echo "=== Checking for vendor directory structure ==="
        ls -la vendor/ || echo "vendor directory not found"
        if [ -d vendor ]; then
          find vendor/ -name "*.config" -o -name "*defconfig*" | head -20
        fi

    - name: Build Poco F1 kernel with KernelSU Next
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
        export ARCH=arm64
        export SUBARCH=arm
        export PATH=$GITHUB_WORKSPACE/kernel_workspace/clang-aosp/bin:$GITHUB_WORKSPACE/kernel_workspace/gcc-64/bin:$GITHUB_WORKSPACE/kernel_workspace/gcc-32/bin:$PATH
        export KBUILD_BUILD_HOST=Github-Action
        export KBUILD_BUILD_USER=$(echo ${{ github.actor }} | tr A-Z a-z)
        BA_CMD="CLANG_TRIPLE=aarch64-linux-gnu- CROSS_COMPILE=aarch64-linux-android- CROSS_COMPILE_ARM32=arm-linux-androideabi-"
        EX_CMD="LD=ld.lld LLVM=1 LLVM_IAS=1"
        
        # Use vendor defconfig structure as provided by developer
        DEFCONFIG="vendor/sdm845-perf_defconfig"
        
        echo "=== Building with defconfig: $DEFCONFIG ==="
        make O=out ARCH=arm64 CC=clang $BA_CMD $EX_CMD $DEFCONFIG 2>&1 | tee build_config.log
        
        # Apply additional configs
        if [ -f vendor/xiaomi/sdm845-common.config ]; then
          echo "=== Applying sdm845-common.config ==="
          scripts/kconfig/merge_config.sh -O out out/.config vendor/xiaomi/sdm845-common.config 2>&1 | tee -a build_config.log
        fi
        
        if [ -f vendor/xiaomi/beryllium.config ]; then
          echo "=== Applying beryllium.config ==="
          scripts/kconfig/merge_config.sh -O out out/.config vendor/xiaomi/beryllium.config 2>&1 | tee -a build_config.log
        fi
        
        echo "=== Starting kernel compilation ==="
        make -j$(nproc --all) O=out ARCH=arm64 CC=clang $BA_CMD $EX_CMD 2>&1 | tee build_kernel.log

    - name: Check kernel output files for Poco F1 Image
      run: |
       cd $GITHUB_WORKSPACE/kernel_workspace
       echo "=== Checking build output ==="
       ls -la android-kernel/out/arch/arm64/boot/ || echo "Boot directory not found"
       
       if [ -f android-kernel/out/arch/arm64/boot/Image.gz-dtb ]; then
           echo "✅ Found Image.gz-dtb"
           echo "CHECK_IMAGE=true" >> $GITHUB_ENV
           echo "KERNEL_IMAGE=Image.gz-dtb" >> $GITHUB_ENV
       elif [ -f android-kernel/out/arch/arm64/boot/Image ]; then
           echo "✅ Found Image"
           echo "CHECK_IMAGE=true" >> $GITHUB_ENV  
           echo "KERNEL_IMAGE=Image" >> $GITHUB_ENV
       else
           echo "❌ Kernel output file is empty"
           echo "=== Build logs ==="
           if [ -f android-kernel/build_config.log ]; then
             echo "Config build log:"
             tail -50 android-kernel/build_config.log
           fi
           if [ -f android-kernel/build_kernel.log ]; then
             echo "Kernel build log (last 100 lines):"
             tail -100 android-kernel/build_kernel.log
           fi
           exit 1
       fi

    - name: Upload build logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: Build-Logs-${{ env.BUILD_TIME }}
        path: |
          kernel_workspace/android-kernel/build_*.log
          kernel_workspace/android-kernel/out/.config

    - name: Make AnyKernel3 with Poco F1 Image
      if: env.CHECK_IMAGE == 'true'
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        git clone https://github.com/osm0sis/AnyKernel3 --depth=1 AnyKernel3
        
        # Copy kernel image (use the detected kernel image)
        if [ "$KERNEL_IMAGE" = "Image.gz-dtb" ]; then
            cp android-kernel/out/arch/arm64/boot/Image.gz-dtb AnyKernel3/
        else
            cp android-kernel/out/arch/arm64/boot/Image AnyKernel3/
        fi
        
        # Copy dtbo if available
        if [ -f android-kernel/out/arch/arm64/boot/dtbo.img ]; then
            cp android-kernel/out/arch/arm64/boot/dtbo.img AnyKernel3/
        fi
        
        # Setup AnyKernel3 configuration for Poco F1
        cd AnyKernel3
        cat > anykernel.sh << 'EOF'
        # AnyKernel3 Ramdisk Mod Script
        # osm0sis @ xda-developers
        
        ## AnyKernel setup
        # begin properties
        properties() { '
        kernel.string=Poco F1 KernelSU-Next by nobiti
        do.devicecheck=1
        do.modules=0
        do.systemless=1
        do.cleanup=1
        do.cleanuponabort=0
        device.name1=beryllium
        device.name2=Poco F1
        device.name3=POCOPHONE F1
        supported.versions=9.0-14.0
        supported.patchlevels=
        '; } # end properties
        
        # shell variables
        block=/dev/block/bootdevice/by-name/boot;
        is_slot_device=1;
        ramdisk_compression=auto;
        patch_vbmeta_flag=auto;
        
        ## AnyKernel methods (DO NOT CHANGE)
        # import patching functions/variables - see for reference
        . tools/ak3-core.sh;
        
        ## AnyKernel file attributes
        # set permissions/ownership for included ramdisk files
        set_perm_recursive 0 0 755 644 $ramdisk/*;
        set_perm_recursive 0 0 750 750 $ramdisk/init* $ramdisk/sbin;
        
        ## AnyKernel install
        dump_boot;
        write_boot;
        ## end install
        EOF
        
        rm -rf .git* README.md

    - name: Compress AnyKernel3 folder with Poco F1 Image to zip
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace/AnyKernel3
        zip -r $GITHUB_WORKSPACE/AK3-PocoF1-4.19_KernelSU-Next_${{ env.KSUVER }}-${{ env.BUILD_TIME }}.zip ./*

    - name: Upload Poco F1 Kernel Image
      if: env.CHECK_IMAGE == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: Image-PocoF1-4.19_KernelSU-Next_${{ env.KSUVER }}
        path: |
          kernel_workspace/android-kernel/out/arch/arm64/boot/Image*
          kernel_workspace/android-kernel/out/arch/arm64/boot/dtbo.img

    - name: Upload Poco F1 AnyKernel3 zip
      if: env.CHECK_IMAGE == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: AK3-PocoF1-4.19_KernelSU-Next_${{ env.KSUVER }}-${{ env.BUILD_TIME }}
        path: AK3-PocoF1-4.19_KernelSU-Next_${{ env.KSUVER }}-${{ env.BUILD_TIME }}.zip
