name: Build Poco F1 Kernel 4.19 with KernelSU-Next

on:
  workflow_dispatch:

env:
  TZ: America/New_York

jobs:
  build:
    name: Build Kernel by ${{ github.actor }}
    runs-on: ubuntu-24.04
    steps:
    - uses: actions/checkout@v4
    
    - name: Set swap to 10G
      uses: pierotofy/set-swap-space@master
      with:
        swap-size-gb: 10
    
    - name: Setup build environment
      run: |
        echo "BUILD_TIME=$(TZ=America/New_York date "+%y%m%d")" >> $GITHUB_ENV
        echo "BUILD_TIME_1=$(TZ=America/New_York date "+%Y-%m-%d")" >> $GITHUB_ENV
        sudo apt-get update -qq
        sudo apt-get install -qq git ccache automake flex lzop bison gperf build-essential zip curl zlib1g-dev g++-multilib bzip2 libbz2-dev liblz4-tool make squashfs-tools dpkg-dev libssl-dev python3 bc libc6-dev-i386 libncurses5-dev
        mkdir -p $GITHUB_WORKSPACE/kernel_workspace
    
    - name: Download toolchains
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        git clone https://gitlab.com/crdroidandroid/android_prebuilts_clang_host_linux-x86_clang-r487747c clang-aosp --quiet
        git clone https://gitlab.com/crdroidandroid/android_prebuilts_gcc_linux-x86_aarch64_aarch64-linux-android-4.9 gcc-64 --quiet
        git clone https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_arm_arm-linux-androideabi-4.9 gcc-32 --quiet
    
    - name: Download kernel source
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        git clone --recursive https://github.com/duckyduckG/android_kernel_xiaomi_sdm845_419.git android-kernel --depth=1 --quiet
        cd android-kernel
        sed -i 's/ -dirty//g' scripts/setlocalversion
    
    - name: Apply QPNP-SMB2 patch
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
        echo "Applying patch to qpnp-smb2.c to fix build errors..."
        BROKEN_FILE="drivers/power/supply/qcom/qpnp-smb2.c"
        
        # Replace all the non-existent members with the one the compiler suggested
        sed -i 's/->thermal_mitigation_dc/->thermal_mitigation/g' $BROKEN_FILE
        sed -i 's/->thermal_mitigation_qc3/->thermal_mitigation/g' $BROKEN_FILE
        sed -i 's/->thermal_mitigation_qc2/->thermal_mitigation/g' $BROKEN_FILE
        sed -i 's/->thermal_mitigation_pd_base/->thermal_mitigation/g' $BROKEN_FILE
        
        echo "Patch applied successfully."
    
    - name: Clean before downloading additional repos
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
        make clean
    
    - name: Download device trees and techpack
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
        
        # Check and clone device trees
        if ! [ -d "arch/arm64/boot/dts/qcom" ]; then
          mkdir -p arch/arm64/boot/dts/qcom
          if git clone https://github.com/duckyduckG/devicetree_qcom-sdm845_419.git temp_qcom --quiet 2>/dev/null; then
            cp -r temp_qcom/* arch/arm64/boot/dts/qcom/
            rm -rf temp_qcom
            echo "QC device trees downloaded"
          fi
        fi
        
        if ! [ -d "arch/arm64/boot/dts/xiaomi" ]; then
          mkdir -p arch/arm64/boot/dts/xiaomi
          if git clone https://github.com/duckyduckG/devicetree_xiaomi_419.git temp_xiaomi --quiet 2>/dev/null; then
            cp -r temp_xiaomi/* arch/arm64/boot/dts/xiaomi/
            rm -rf temp_xiaomi
            echo "Xiaomi device trees downloaded"
          fi
        fi
        
        # Check and clone techpack
        if ! [ -d "techpack/mi845" ]; then
          mkdir -p techpack/mi845
          if git clone https://github.com/duckyduckG/kernel_techpack_mi845_419.git temp_techpack --quiet 2>/dev/null; then
            cp -r temp_techpack/* techpack/mi845/
            rm -rf temp_techpack
            echo "Techpack mi845 downloaded"
          fi
        fi
    
    - name: Setup KernelSU-Next
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
        curl -LSs "https://raw.githubusercontent.com/rifsxd/KernelSU-Next/next/kernel/setup.sh" | bash - >/dev/null 2>&1
        if [ -d "KernelSU-Next" ]; then
          cd KernelSU-Next
          KSU_VERSION=$(expr $(/usr/bin/git rev-list --count HEAD) + 10200)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          echo "KernelSU version: $KSU_VERSION"
        fi
    
    - name: Build kernel
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
        export ARCH=arm64
        export SUBARCH=arm
        export PATH=$GITHUB_WORKSPACE/kernel_workspace/clang-aosp/bin:$GITHUB_WORKSPACE/kernel_workspace/gcc-64/bin:$GITHUB_WORKSPACE/kernel_workspace/gcc-32/bin:$PATH
        export KBUILD_BUILD_HOST=Github-Action
        export KBUILD_BUILD_USER=$(echo ${{ github.actor }} | tr A-Z a-z)
        
        BA_CMD="CLANG_TRIPLE=aarch64-linux-gnu- CROSS_COMPILE=aarch64-linux-android- CROSS_COMPILE_ARM32=arm-linux-androideabi-"
        EX_CMD="LD=ld.lld LLVM=1 LLVM_IAS=1"
        
        # Try vendor defconfig first, then fallbacks
        for DEFCONFIG in "vendor/sdm845-perf_defconfig" "defconfig" "gki_defconfig"; do
          echo "Trying defconfig: $DEFCONFIG"
          if make O=out ARCH=arm64 CC=clang $BA_CMD $EX_CMD $DEFCONFIG >/dev/null 2>&1; then
            echo "Using defconfig: $DEFCONFIG"
            break
          fi
        done
        
        # Add Xiaomi configs if they exist
        if [ -f "arch/arm64/configs/vendor/xiaomi/sdm845-common.config" ]; then
          echo "Adding vendor/xiaomi/sdm845-common.config"
          cat arch/arm64/configs/vendor/xiaomi/sdm845-common.config >> out/.config
        fi
        
        if [ -f "arch/arm64/configs/vendor/xiaomi/beryllium.config" ]; then
          echo "Adding vendor/xiaomi/beryllium.config"
          cat arch/arm64/configs/vendor/xiaomi/beryllium.config >> out/.config
        fi
        
        # Refresh config after adding fragments
        make O=out ARCH=arm64 CC=clang $BA_CMD $EX_CMD olddefconfig >/dev/null 2>&1
        
        echo "Starting kernel compilation..."
        make -j$(nproc --all) O=out ARCH=arm64 CC=clang $BA_CMD $EX_CMD 2>&1 | tee build.log | grep -E "(CC|LD|AR|GEN|Error|error|Warning|warning|\[.*%\])" || {
          echo "Build failed!"
          echo "Recent errors:"
          grep -i "error:" build.log | tail -10
          exit 1
        }
        
        echo "Build completed successfully!"
    
    - name: Check kernel output
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        
        if [ -f android-kernel/out/arch/arm64/boot/Image.gz-dtb ]; then
            echo "SUCCESS: Image.gz-dtb found"
            ls -lh android-kernel/out/arch/arm64/boot/Image.gz-dtb
            echo "CHECK_IMAGE=true" >> $GITHUB_ENV
        elif [ -f android-kernel/out/arch/arm64/boot/Image ]; then
            echo "SUCCESS: Image found"
            ls -lh android-kernel/out/arch/arm64/boot/Image
            echo "CHECK_IMAGE=true" >> $GITHUB_ENV
            echo "IMAGE_TYPE=Image" >> $GITHUB_ENV
        else
            echo "ERROR: No kernel image found"
            exit 1
        fi
    
    - name: Make AnyKernel3 zip
      if: env.CHECK_IMAGE == 'true'
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        git clone https://github.com/osm0sis/AnyKernel3 --depth=1 --quiet
        cd AnyKernel3
        
        IMAGE_FILE="Image.gz-dtb"
        [ "$IMAGE_TYPE" = "Image" ] && IMAGE_FILE="Image"
        
        cat > anykernel.sh << 'EOF'
        # AnyKernel3 Ramdisk Mod Script
        properties() { '
        kernel.string=Poco F1 KernelSU-Next Kernel
        do.devicecheck=1
        do.modules=0
        do.systemless=1
        do.cleanup=1
        do.cleanuponabort=0
        device.name1=beryllium
        device.name2=Poco F1
        device.name3=POCO F1
        '; } # end properties
        
        block=/dev/block/bootdevice/by-name/boot;
        is_slot_device=0;
        ramdisk_compression=auto;
        patch_vbmeta_flag=auto;
        
        . tools/ak3-core.sh;
        
        set_perm_recursive 0 0 755 644 $ramdisk/*;
        set_perm_recursive 0 0 750 750 $ramdisk/init* $ramdisk/sbin;
        
        dump_boot;
        write_boot;
        EOF
        
        cp ../android-kernel/out/arch/arm64/boot/$IMAGE_FILE ./
        rm -rf .git* README.md
        
        zip -r $GITHUB_WORKSPACE/AK3-PocoF1-KernelSU-Next_${{ env.KSUVER }}-${{ env.BUILD_TIME }}.zip ./* >/dev/null
        echo "Flashable zip created:"
        ls -lh $GITHUB_WORKSPACE/AK3-PocoF1-KernelSU-Next_${{ env.KSUVER }}-${{ env.BUILD_TIME }}.zip
    
    - name: Upload kernel image
      if: env.CHECK_IMAGE == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: Image-PocoF1-KernelSU-Next_${{ env.KSUVER }}
        path: kernel_workspace/android-kernel/out/arch/arm64/boot/Image*

    - name: Upload build log
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: Build-Log-${{ env.BUILD_TIME }}
        path: kernel_workspace/android-kernel/build.log

    - name: Upload AnyKernel3 zip
      if: env.CHECK_IMAGE == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: AK3-PocoF1-KernelSU-Next_${{ env.KSUVER }}-${{ env.BUILD_TIME }}
        path: AK3-PocoF1-KernelSU-Next_${{ env.KSUVER }}-${{ env.BUILD_TIME }}.zip
