# Name: Build Poco F1 Kernel 4.19 with KernelSU-Next

on:
  workflow_dispatch:

env:
  TZ: America/New_York

jobs:
  build:
    name: Build Kernel by ${{ github.actor }}
    runs-on: ubuntu-24.04
    steps:
    - uses: actions/checkout@v4
    
    - name: Set swap to 10G
      uses: pierotofy/set-swap-space@master
      with:
        swap-size-gb: 10
    
    - name: Setup build kernel environment
      run: |
        set -e
        echo "BUILD_TIME=$(TZ=America/New_York date "+%y%m%d")" >> $GITHUB_ENV
        echo "BUILD_TIME_1=$(TZ=America/New_York date "+%Y-%m-%d")" >> $GITHUB_ENV
        echo "Setting up build environment..."
        sudo apt-get update -qq
        sudo apt-get install -qq git ccache automake flex lzop bison gperf build-essential zip curl zlib1g-dev g++-multilib bzip2 libbz2-dev liblz4-tool make squashfs-tools dpkg-dev libssl-dev python3 bc libc6-dev-i386 libncurses5-dev || { echo "Failed to install build dependencies"; exit 1; }
        mkdir -p $GITHUB_WORKSPACE/kernel_workspace
        echo "Build environment setup completed successfully"
    
    - name: Download Clang from aosp
      run: |
        set -e
        echo "Downloading Clang compiler..."
        cd $GITHUB_WORKSPACE/kernel_workspace
        git clone https://gitlab.com/crdroidandroid/android_prebuilts_clang_host_linux-x86_clang-r487747c clang-aosp --quiet || { echo "Failed to clone Clang repository"; exit 1; }
        echo "Clang downloaded successfully"
    
    - name: Download Gcc from aosp
      run: |
        set -e
        echo "Downloading GCC compilers..."
        cd $GITHUB_WORKSPACE/kernel_workspace
        git clone https://gitlab.com/crdroidandroid/android_prebuilts_gcc_linux-x86_aarch64_aarch64-linux-android-4.9 gcc-64 --quiet || { echo "Failed to clone GCC 64-bit repository"; exit 1; }
        git clone https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_arm_arm-linux-androideabi-4.9 gcc-32 --quiet || { echo "Failed to clone GCC 32-bit repository"; exit 1; }
        echo "GCC compilers downloaded successfully"
    
    - name: Download Poco F1 kernel source
      run: |
        set -e
        echo "Downloading Poco F1 kernel source..."
        cd $GITHUB_WORKSPACE/kernel_workspace
        git clone --recursive https://github.com/duckyduckG/android_kernel_xiaomi_sdm845_419.git android-kernel --depth=1 --quiet || { echo "Failed to clone kernel repository"; exit 1; }
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
        
        echo "Downloading device trees and techpack..."
        
        # Try different repository naming patterns for device trees and techpack
        REPOS_DOWNLOADED=0
        
        # Try to clone QC SDM845 device trees with different possible names
        echo "Attempting to clone QC SDM845 device trees..."
        mkdir -p arch/arm64/boot/dts/qcom-sdm845
        for repo_name in "devicetree_qcom-sdm845_419" "devicetree_qcom_sdm845_419" "android_device_qcom_sdm845" "kernel_devicetree_qcom_sdm845"; do
          if git clone https://github.com/duckyduckG/${repo_name}.git temp_qcom_dt --depth=1 --quiet 2>/dev/null; then
            echo "Successfully cloned QC device trees from: ${repo_name}"
            cp -r temp_qcom_dt/* arch/arm64/boot/dts/qcom-sdm845/ 2>/dev/null || cp -r temp_qcom_dt/. arch/arm64/boot/dts/qcom-sdm845/
            rm -rf temp_qcom_dt
            REPOS_DOWNLOADED=$((REPOS_DOWNLOADED + 1))
            break
          fi
        done
        
        # Try to clone Xiaomi device trees with different possible names
        echo "Attempting to clone Xiaomi device trees..."
        mkdir -p arch/arm64/boot/dts/xiaomi
        for repo_name in "devicetree_xiaomi_419" "android_device_xiaomi_sdm845" "kernel_devicetree_xiaomi" "devicetree_xiaomi_beryllium"; do
          if git clone https://github.com/duckyduckG/${repo_name}.git temp_xiaomi_dt --depth=1 --quiet 2>/dev/null; then
            echo "Successfully cloned Xiaomi device trees from: ${repo_name}"
            cp -r temp_xiaomi_dt/* arch/arm64/boot/dts/xiaomi/ 2>/dev/null || cp -r temp_xiaomi_dt/. arch/arm64/boot/dts/xiaomi/
            rm -rf temp_xiaomi_dt
            REPOS_DOWNLOADED=$((REPOS_DOWNLOADED + 1))
            break
          fi
        done
        
        # Try to clone techpack mi845 with different possible names
        echo "Attempting to clone techpack mi845..."
        mkdir -p techpack/mi845
        for repo_name in "kernel_techpack_mi845_419" "techpack_mi845_419" "android_techpack_mi845" "kernel_techpack_mi845"; do
          if git clone https://github.com/duckyduckG/${repo_name}.git temp_techpack --depth=1 --quiet 2>/dev/null; then
            echo "Successfully cloned techpack mi845 from: ${repo_name}"
            cp -r temp_techpack/* techpack/mi845/ 2>/dev/null || cp -r temp_techpack/. techpack/mi845/
            rm -rf temp_techpack
            REPOS_DOWNLOADED=$((REPOS_DOWNLOADED + 1))
            break
          fi
        done
        
        echo "Downloaded $REPOS_DOWNLOADED additional repositories"
        
        # Check what we have and warn if missing
        if [ ! "$(ls -A arch/arm64/boot/dts/qcom-sdm845 2>/dev/null)" ]; then
          echo "WARNING: QC SDM845 device trees not found or empty"
        fi
        
        if [ ! "$(ls -A arch/arm64/boot/dts/xiaomi 2>/dev/null)" ]; then
          echo "WARNING: Xiaomi device trees not found or empty"
        fi
        
        if [ ! "$(ls -A techpack/mi845 2>/dev/null)" ]; then
          echo "WARNING: techpack/mi845 not found or empty"
          echo "This may cause beryllium_defconfig to fail"
        fi
        
        # Check for defconfigs
        if [ -f "arch/arm64/configs/vendor/sdm845-perf_defconfig" ]; then
          echo "Found vendor/sdm845-perf_defconfig"
        else
          echo "WARNING: vendor/sdm845-perf_defconfig not found"
          echo "Available defconfigs:"
          find arch/arm64/configs/ -name "*defconfig" | head -5
        fi
        
        cd scripts
        sed -i 's/ -dirty//g' setlocalversion || { echo "Failed to modify setlocalversion"; exit 1; }
        echo "Kernel source setup completed"

    # ---------- NEW STEP TO FIX THE BUILD ERROR ----------
    - name: Patch Power Supply Driver for Build Fix
      run: |
        set -e
        echo "Applying patch to qpnp-smb2.c to fix build errors..."
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
        
        # This file has the errors
        BROKEN_FILE="drivers/power/supply/qcom/qpnp-smb2.c"
        
        # Replace all the non-existent members with the one the compiler suggested
        sed -i 's/->thermal_mitigation_dc/->thermal_mitigation/g' $BROKEN_FILE
        sed -i 's/->thermal_mitigation_qc3/->thermal_mitigation/g' $BROKEN_FILE
        sed -i 's/->thermal_mitigation_qc2/->thermal_mitigation/g' $BROKEN_FILE
        sed -i 's/->thermal_mitigation_pd_base/->thermal_mitigation/g' $BROKEN_FILE
        
        echo "Patch applied successfully."
    # ----------------------------------------------------

    - name: Setup KernelSU Next
      run: |
        set -e
        echo "Setting up KernelSU-Next..."
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
        rm -rf KernelSU-Next
        curl -LSs "https://raw.githubusercontent.com/rifsxd/KernelSU-Next/next/kernel/setup.sh" | bash - >/dev/null 2>&1 || { echo "Failed to setup KernelSU-Next"; exit 1; }
        echo "KernelSU-Next setup completed"
        
        if [ -d "KernelSU-Next" ]; then
          cd KernelSU-Next
          KSU_VERSION=$(expr $(/usr/bin/git rev-list --count HEAD) + 10200)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          echo "KernelSU version: $KSU_VERSION"
        else
          echo "ERROR: KernelSU-Next directory not created"
          exit 1
        fi

    - name: Check for power supply driver conflicts
      run: |
        set -e
        echo "Checking for power supply driver conflicts..."
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
        
        # Only report potential conflicts, don't spam logs
        POWER_CONFLICTS=0
        
        # Check for common conflict patterns
        if find . -name "*smb*charger*" | head -1 | grep -q .; then
          echo "WARNING: SMB charger drivers detected - potential conflict"
          POWER_CONFLICTS=1
        fi
        
        if find drivers/ -name "*power*" -o -name "*battery*" -o -name "*charger*" 2>/dev/null | wc -l | awk '{if($1 > 10) print "WARNING: Multiple power drivers detected ("$1" files) - potential conflicts"}' | grep -q .; then
          echo "WARNING: Multiple power supply drivers detected"
          POWER_CONFLICTS=1
        fi
        
        # Check techpack for power drivers
        if [ -d "techpack/mi845" ] && find techpack/mi845/ -name "*power*" -o -name "*battery*" -o -name "*charger*" 2>/dev/null | head -1 | grep -q .; then
          echo "INFO: Techpack mi845 contains power supply drivers"
        fi
        
        if [ $POWER_CONFLICTS -eq 0 ]; then
          echo "No obvious power supply driver conflicts detected"
        else
          echo "Power supply conflicts detected - monitor build for errors"
        fi

    - name: Build Poco F1 kernel with KernelSU Next
      run: |
        set -e
        echo "Starting kernel build process..."
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
        export ARCH=arm64
        export SUBARCH=arm
        export PATH=$GITHUB_WORKSPACE/kernel_workspace/clang-aosp/bin:$GITHUB_WORKSPACE/kernel_workspace/gcc-64/bin:$GITHUB_WORKSPACE/kernel_workspace/gcc-32/bin:$PATH
        export KBUILD_BUILD_HOST=Github-Action
        export KBUILD_BUILD_USER=$(echo ${{ github.actor }} | tr A-Z a-z)
        BA_CMD="CLANG_TRIPLE=aarch64-linux-gnu- CROSS_COMPILE=aarch64-linux-android- CROSS_COMPILE_ARM32=arm-linux-androideabi-"
        EX_CMD="LD=ld.lld LLVM=1 LLVM_IAS=1"
        DEFCONFIG="vendor/sdm845-perf_defconfig"
        
        # Quick compiler check
        which clang >/dev/null || { echo "Clang not found in PATH"; exit 1; }
        which aarch64-linux-android-gcc >/dev/null || { echo "aarch64-linux-android-gcc not found"; exit 1; }
        which arm-linux-androideabi-gcc >/dev/null || { echo "arm-linux-androideabi-gcc not found"; exit 1; }
        
        make O=out clean >/dev/null 2>&1 || echo "Clean failed, continuing..."
        
        echo "Making defconfig: $DEFCONFIG"
        if make O=out ARCH=arm64 CC=clang $BA_CMD $EX_CMD $DEFCONFIG >/dev/null 2>&1; then
          echo "Successfully loaded $DEFCONFIG"
        else
          echo "Failed to make defconfig: $DEFCONFIG, trying fallbacks..."
          FALLBACK_CONFIGS=("defconfig" "gki_defconfig" "ranchu64_defconfig")
          SUCCESS=false
          
          for config in "${FALLBACK_CONFIGS[@]}"; do
            echo "Trying fallback config: $config"
            if make O=out ARCH=arm64 CC=clang $BA_CMD $EX_CMD $config >/dev/null 2>&1; then
              echo "Successfully loaded fallback config: $config"
              SUCCESS=true
              break
            fi
          done
          
          if [ "$SUCCESS" = false ]; then
            echo "All defconfig attempts failed!"
            echo "Available defconfigs:"
            find arch/arm64/configs/ -name "*defconfig" | head -10
            exit 1
          fi
        fi
        
        echo "Starting kernel compilation..."
        echo "Build started at: $(date)"
        
        # Capture build output but only show errors/warnings and progress
        make -j$(nproc --all) O=out ARCH=arm64 CC=clang $BA_CMD $EX_CMD 2>&1 | tee build.log | grep -E "(CC|LD|AR|GEN|HOSTCC|Error|error|Warning|warning|Failed|failed|\[.*%\])" || {
          echo "Kernel build failed!"
          echo "=== RECENT BUILD OUTPUT ==="
          tail -30 build.log | grep -E "(error|Error|failed|Failed|undefined|redefinition)"
          
          echo "=== POWER SUPPLY ERROR CHECK ==="
          if grep -qi "power.*error\|battery.*error\|charger.*error\|duplicate.*power" build.log; then
            echo "Power supply driver conflicts detected in build log!"
            grep -i "power.*error\|battery.*error\|charger.*error" build.log | tail -5
          else
            echo "No power supply specific errors found"
          fi
          
          echo "=== GENERAL ERRORS ==="
          grep -i "error:\|undefined reference\|multiple definition" build.log | tail -10 || echo "No specific error patterns found"
          exit 1
        }
        
        echo "Kernel build completed successfully at: $(date)"

    - name: Check kernel output files for Poco F1 Image
      run: |
        set -e
        echo "Checking kernel build output..."
        cd $GITHUB_WORKSPACE/kernel_workspace
        
        if [ -f android-kernel/out/arch/arm64/boot/Image.gz-dtb ]; then
            echo "SUCCESS: Image.gz-dtb found!"
            ls -lh android-kernel/out/arch/arm64/boot/Image.gz-dtb
            echo "CHECK_IMAGE=true" >> $GITHUB_ENV
        elif [ -f android-kernel/out/arch/arm64/boot/Image ]; then
            echo "SUCCESS: Image found (alternative format)"
            ls -lh android-kernel/out/arch/arm64/boot/Image
            echo "CHECK_IMAGE=true" >> $GITHUB_ENV
            echo "IMAGE_TYPE=Image" >> $GITHUB_ENV
        elif [ -f android-kernel/out/arch/arm64/boot/Image.gz ]; then
            echo "SUCCESS: Image.gz found (alternative format)"
            ls -lh android-kernel/out/arch/arm64/boot/Image.gz
            echo "CHECK_IMAGE=true" >> $GITHUB_ENV
            echo "IMAGE_TYPE=Image.gz" >> $GITHUB_ENV
        else
            echo "ERROR: No kernel output file found!"
            echo "Available files in boot directory:"
            ls -la android-kernel/out/arch/arm64/boot/ 2>/dev/null || echo "Boot directory not found"
            echo "=== BUILD LOG ERRORS ==="
            if [ -f android-kernel/build.log ]; then
              grep -i "error:\|failed:" android-kernel/build.log | tail -10 || echo "No specific errors found"
            fi
            exit 1
        fi

    - name: Make AnyKernel3 with Poco F1 Image
      if: env.CHECK_IMAGE == 'true'
      run: |
        set -e
        echo "Setting up AnyKernel3..."
        cd $GITHUB_WORKSPACE/kernel_workspace
        git clone https://github.com/osm0sis/AnyKernel3 --depth=1 --quiet AnyKernel3 || { echo "Failed to clone AnyKernel3"; exit 1; }
        cd AnyKernel3
        
        # Determine which image file to use
        IMAGE_FILE="Image.gz-dtb"
        if [ "$IMAGE_TYPE" = "Image" ]; then
          IMAGE_FILE="Image"
        elif [ "$IMAGE_TYPE" = "Image.gz" ]; then
          IMAGE_FILE="Image.gz"
        fi
        
        echo "Using image file: $IMAGE_FILE"
        
        # Configure AnyKernel3 for Poco F1
        cat > anykernel.sh << 'EOF'
        # AnyKernel3 Ramdisk Mod Script
        # osm0sis @ xda-developers
        
        ## AnyKernel setup
        # begin properties
        properties() { '
        kernel.string=Poco F1 KernelSU-Next Kernel
        do.devicecheck=1
        do.modules=0
        do.systemless=1
        do.cleanup=1
        do.cleanuponabort=0
        device.name1=beryllium
        device.name2=Poco F1
        device.name3=POCO F1
        supported.versions=
        supported.patchlevels=
        '; } # end properties
        
        # shell variables
        block=/dev/block/bootdevice/by-name/boot;
        is_slot_device=0;
        ramdisk_compression=auto;
        patch_vbmeta_flag=auto;
        
        ## AnyKernel methods (DO NOT CHANGE)
        # import patching functions/variables - see for reference
        . tools/ak3-core.sh;
        
        ## AnyKernel file attributes
        # set permissions/ownership for included ramdisk files
        set_perm_recursive 0 0 755 644 $ramdisk/*;
        set_perm_recursive 0 0 750 750 $ramdisk/init* $ramdisk/sbin;
        
        ## AnyKernel boot install
        dump_boot;
        write_boot;
        ## end boot install
        EOF
        
        if [ -f "../android-kernel/out/arch/arm64/boot/$IMAGE_FILE" ]; then
          cp ../android-kernel/out/arch/arm64/boot/$IMAGE_FILE ./
          echo "Successfully copied $IMAGE_FILE"
        else
          echo "ERROR: Source image file not found: ../android-kernel/out/arch/arm64/boot/$IMAGE_FILE"
          exit 1
        fi
        
        rm -rf .git* README.md
        echo "AnyKernel3 setup completed"

    - name: Compress AnyKernel3 folder with Poco F1 Image to zip
      if: env.CHECK_IMAGE == 'true'
      run: |
        set -e
        cd $GITHUB_WORKSPACE/kernel_workspace/AnyKernel3
        zip -r $GITHUB_WORKSPACE/AK3-PocoF1-KernelSU-Next_${{ env.KSUVER }}-${{ env.BUILD_TIME }}.zip ./* >/dev/null || { echo "Failed to create zip"; exit 1; }
        echo "Flashable zip created successfully:"
        ls -lh $GITHUB_WORKSPACE/AK3-PocoF1-KernelSU-Next_${{ env.KSUVER }}-${{ env.BUILD_TIME }}.zip

    - name: Upload Poco F1 Image
      if: env.CHECK_IMAGE == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: Image-PocoF1-KernelSU-Next_${{ env.KSUVER }}
        path: kernel_workspace/android-kernel/out/arch/arm64/boot/Image*

    - name: Upload build log
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: Build-Log-${{ env.BUILD_TIME }}
        path: kernel_workspace/android-kernel/build.log

    - name: Upload Poco F1 AnyKernel3 zip
      if: env.CHECK_IMAGE == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: AK3-PocoF1-KernelSU-Next_${{ env.KSUVER }}-${{ env.BUILD_TIME }}
        path: AK3-PocoF1-KernelSU-Next_${{ env.KSUVER }}-${{ env.BUILD_TIME }}.zip
        
