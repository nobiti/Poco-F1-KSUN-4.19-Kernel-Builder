name: Build Poco F1 (beryllium) 4.19 Kernel with KernelSU-Next

on:
  workflow_dispatch:

env:
  TZ: America/New_York
  KERNEL_REPO: https://github.com/duckyduckG/android_kernel_xiaomi_sdm845_419
  KERNEL_BRANCH: beryllium
  DEFCONFIG: beryllium_defconfig

jobs:
  build:
    name: Build by ${{ github.actor }}
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4

      - name: Set swap to 10G
        uses: pierotofy/set-swap-space@master
        with:
          swap-size-gb: 10

      - name: Setup build environment
        run: |
          echo "BUILD_TIME=$(TZ=America/New_York date '+%y%m%d')" >> $GITHUB_ENV
          echo "BUILD_TIME_1=$(TZ=America/New_York date '+%Y-%m-%d')" >> $GITHUB_ENV
          sudo apt-get update
          sudo apt-get install -y git ccache automake flex lzop bison gperf build-essential zip curl zlib1g-dev g++-multilib bzip2 libbz2-dev liblz4-tool make squashfs-tools dpkg-dev libssl-dev python3 bc libc6-dev-i386 libncurses5-dev
          mkdir -p $GITHUB_WORKSPACE/kernel_workspace

      - name: Download Clang (AOSP r487747c)
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace
          git clone https://gitlab.com/crdroidandroid/android_prebuilts_clang_host_linux-x86_clang-r487747c clang-aosp

      - name: Download GCC (legacy 4.9, optional)
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace
          git clone https://gitlab.com/crdroidandroid/android_prebuilts_gcc_linux-x86_aarch64_aarch64-linux-android-4.9 gcc-64
          git clone https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_arm_arm-linux-androideabi-4.9 gcc-32

      - name: Download kernel source (beryllium 4.19)
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace
          git clone --recursive "$KERNEL_REPO" -b "$KERNEL_BRANCH" android-kernel --depth=1
          cd android-kernel/scripts || true
          [ -f setlocalversion ] && sed -i 's/ -dirty//g' setlocalversion || true

      - name: Setup KernelSU-Next
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
          rm -rf KernelSU-Next
          curl -LSs "https://raw.githubusercontent.com/rifsxd/KernelSU-Next/next/kernel/setup.sh" | bash -
          KSU_VERSION=$(cd KernelSU-Next && expr $(/usr/bin/git rev-list --count HEAD) + 10200)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV

      - name: Build beryllium 4.19 kernel with KernelSU-Next
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
          export ARCH=arm64
          export SUBARCH=arm
          export PATH=$GITHUB_WORKSPACE/kernel_workspace/clang-aosp/bin:$GITHUB_WORKSPACE/kernel_workspace/gcc-64/bin:$GITHUB_WORKSPACE/kernel_workspace/gcc-32/bin:$PATH
          export KBUILD_BUILD_HOST=Github-Action
          export KBUILD_BUILD_USER=$(echo ${{ github.actor }} | tr A-Z a-z)
          BA_CMD="CLANG_TRIPLE=aarch64-linux-gnu- CROSS_COMPILE=aarch64-linux-android- CROSS_COMPILE_ARM32=arm-linux-androideabi-"
          EX_CMD="LD=ld.lld LLVM=1 LLVM_IAS=1"
          make O=out ARCH=arm64 CC=clang $BA_CMD $EX_CMD $DEFCONFIG
          make -j$(nproc --all) O=out ARCH=arm64 CC=clang $BA_CMD $EX_CMD

      - name: Check kernel outputs (Image.gz-dtb / Image / dtbo.img)
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel/out/arch/arm64/boot
          if [ -f Image.gz-dtb ]; then
            echo "KIMG=Image.gz-dtb" >> $GITHUB_ENV
          elif [ -f Image ]; then
            echo "KIMG=Image" >> $GITHUB_ENV
          else
            echo "Kernel image not found" && ls -la && exit 1
          fi
          if [ -f dtbo.img ]; then
            echo "HAS_DTBO=true" >> $GITHUB_ENV
          else
            echo "HAS_DTBO=false" >> $GITHUB_ENV
          fi

      - name: Prepare AnyKernel3 for beryllium
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace
          rm -rf AnyKernel3
          git clone https://github.com/osm0sis/AnyKernel3 --depth=1 AnyKernel3
          sed -i 's/^device.name1=.*/device.name1=beryllium/g' AnyKernel3/anykernel.sh || echo 'device.name1=beryllium' >> AnyKernel3/anykernel.sh
          sed -i 's/^is_slot_device=.*/is_slot_device=1/g' AnyKernel3/anykernel.sh || echo 'is_slot_device=1' >> AnyKernel3/anykernel.sh
          cp android-kernel/out/arch/arm64/boot/${{ env.KIMG }} AnyKernel3/
          if [ "${{ env.HAS_DTBO }}" = "true" ]; then
            cp android-kernel/out/arch/arm64/boot/dtbo.img AnyKernel3/
          fi
          rm -rf AnyKernel3/.git* AnyKernel3/README.md

      - name: Upload kernel image
        uses: actions/upload-artifact@v4
        with:
          name: Image-beryllium-4.19_KernelSU-Next_${{ env.KSUVER }}
          path: |
            kernel_workspace/android-kernel/out/arch/arm64/boot/${{ env.KIMG }}
            kernel_workspace/android-kernel/out/arch/arm64/boot/dtbo.img

      - name: Create & Upload AnyKernel3 flashable zip
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace/AnyKernel3
          zip -r9 ../AK3-beryllium-4.19_KernelSU-Next_${{ env.KSUVER }}-${{ env.BUILD_TIME }}.zip .
        shell: bash
      - uses: actions/upload-artifact@v4
        with:
          name: AK3-beryllium-4.19_KernelSU-Next_${{ env.KSUVER }}-${{ env.BUILD_TIME }}
          path: kernel_workspace/AK3-beryllium-4.19_KernelSU-Next_${{ env.KSUVER }}-${{ env.BUILD_TIME }}.zip